syntax = "proto3";

import "newsdoc/newsdoc.proto";

package ttab.baboon;

option go_package = "github.com/ttab/baboon/rpc/baboon";

service Assets {
  rpc StoreFont(StoreFontRequest) returns (StoreFontResponse);
  rpc GetFonts(GetFontsRequest) returns (GetFontsResponse);
  rpc ListFonts(ListFontsRequest) returns (ListFontsResponse);
  rpc DeleteFont(DeleteFontRequest) returns (DeleteFontResponse);
  rpc StoreICCProfile(StoreICCProfileRequest) returns (StoreICCProfileResponse);
  rpc ListICCProfiles(ListICCProfilesRequest) returns (ListICCProfilesResponse);
}

service Print {
  rpc RenderArticle(RenderArticleRequest) returns (RenderArticleResponse);
  rpc GetEditableArchive(GetEditableArchiveRequest) returns (GetEditableArchiveResponse);
  // LayoutPreview is used by the CLI tool to do preview rendering.
  rpc LayoutPreview(LayoutPreviewRequest) returns (LayoutPreviewResponse);
  rpc CreateFlow(CreateFlowRequest) returns (CreateFlowResponse);
  rpc CopyArticleToFlow(CopyArticleToFlowRequest) returns (CopyArticleToFlowResponse);
  rpc GetScribusInfo(GetScribusInfoRequest) returns (GetScribusInfoResponse);
  // GetRenderedArticles allows a client to consume and download all finished renders.
  rpc GetRenderedArticles(GetRenderedArticlesRequest) returns (GetRenderedArticlesResponse);
  // SetHypenation allows clients to set custom hypenation for a word.
  rpc SetHypenation(SetHypenationRequest) returns (SetHypenationResponse);
  // ListHypenations is used to list words in the hypenation dictionary.
  rpc ListHypenations(ListHypenationsRequest) returns (ListHypenationsResponse);
  // RemoveHypenation is used to remove a custom hypenation for a word.
  rpc RemoveHypenation(RemoveHypenationRequest) returns (RemoveHypenationResponse);
}

message SetHypenationRequest {
  string language  = 1;
  string word      = 2;
  string hypenated = 3;
  bool ignore      = 4;
}
message SetHypenationResponse {}

message ListHypenationsRequest {
  string language = 1;
  int64  page     = 2;
}

message ListHypenationsResponse {
  repeated Hypenation items = 1;
}

message Hypenation {
  string language   = 1;
  string word       = 2;
  string created    = 3;
  string updated    = 4;
  string updated_by = 5;
  string hypenated  = 6;
  bool ignore       = 7;
}

message RemoveHypenationRequest {
  string language = 1;
  string word     = 2;
}

message RemoveHypenationResponse {}

message GetRenderedArticlesRequest {
  // After is used to control the position in the render event log.
  int64 after = 1;
}

message GetRenderedArticlesResponse {
  repeated RenderEvent events = 1;
}

message RenderEvent {
  // Id of the event.
  int64 id       = 1;
  // Type of the event, one of "rendered", "failed", "failed_attempt".
  string type    = 2;
  // Article UUID.
  string article = 3;
  // Error - if any that prevented rendering.
  string error   = 4;
  // Rendered articles that should be downloaded.
  repeated RenderedArticle rendered = 5;
  // Removed articles that should be deleted.
  repeated RenderedArticle removed  = 6;
  // ArticleVersion is the version of the article that was rendered.
  int64 article_version             = 7;
  // Time is the time the event as an RFC3339 timestamp.
  string time                       = 8;
}

message RenderedArticle {
  string date               = 1;
  string product            = 2;
  string layout             = 3;
  string position           = 4;
  RenderedAsset pdf         = 5;
  RenderedAsset tagged_text = 6;
}

message RenderedAsset {
  // DownloadLink that can be used to fetch the asset.
  string download_link = 5;
  // Size of the PDF in bytes.
  int64 size           = 6;
  // Sha256Hash is the SHA-256 checksum for the PDF.
  string sha256_hash   = 7;
}

message CreateFlowRequest {
  // FlowUuid to instantiate on the given date. Required.
  string flow_uuid         = 1;
  // Date to instantiate the flow on in the format YYYY-MM-DD. Required.
  string date              = 2;
  // Articles to instantiate. Names of the defined print contents in the
  // flow. Optional, omit to instantiate all.
  repeated string articles = 3;
  // TemplateUUID is the UUID of an article to use as a template for the created
  // print articles. Optional.
  string template_uuid     = 4;
}

message CreateFlowResponse {
  // Articles that were created.
  repeated PrintArticleReference articles = 1;
}

message PrintArticleReference {
  string uuid = 1;
  string name = 2;
}

message CopyArticleToFlowRequest {
  // SourceUuid is the UUID of the article that we want to copy. Required.
  string source_uuid       = 1;
  // FlowUuid to copy the article to. Required.
  string flow_uuid         = 2;
  // Date to set for the copy on in the format YYYY-MM-DD. Required.
  string date              = 3;
  // Article is the name of the defined print content in the flow to
  // instantiate. Required.
  string article           = 4;
}

message CopyArticleToFlowResponse {
  // Uuid of the created article.
  string uuid = 1;
}

message GetScribusInfoRequest {
  // Uuid of the layout document to get information for. Required.
  string uuid = 1;
}

message GetScribusInfoResponse {
  repeated ScribusDependency fonts        = 1;
  repeated ScribusDependency icc_profiles = 2;
  repeated string slots                   = 3;
  repeated ScribusLayer layers            = 4;
}

message ScribusLayer {
  string id   = 1;
  string name = 2;
  string slot = 3;
  repeated ScribusFrame frames = 4;
}

message ScribusFrame {
  string name    = 1;
  string slot    = 2;
  FrameType type = 3;
}

enum FrameType {
  FRAME_UNKNOWN = 0;
  FRAME_TEXT    = 1;
  FRAME_IMAGE   = 2;
}

message ScribusDependency {
  string name    = 1;
  bool satisfied = 2;
}

message StoreFontRequest {
  string name        = 1;
  string description = 2;
  string filename    = 3;
  bytes file         = 4;
}

message StoreFontResponse {
  string version = 1;
}

message GetFontsRequest {
  // Fonts to load, maximum of 20 fonts per batch.
  repeated FontRef fonts = 1;
}

message FontRef {
  string name = 1;
  // IfNotVersion can be used to only return a font if it hasn't been updated.
  string if_not_version = 2;
}

message GetFontsResponse {
  repeated Font fonts = 1;
}

message Font {
  string name        = 1;
  string version     = 3;
  string description = 4;
  bytes file         = 5;
}

message ListFontsRequest {
  int64 page = 1;
}

message ListFontsResponse {
  repeated FontInfo items = 1;
  int64 next_page         = 2;
}

message FontInfo {
  string name        = 1;
  string version     = 2;
  string description = 3;
}

message DeleteFontRequest {
  string name = 1;
}

message DeleteFontResponse {}

message StoreICCProfileRequest {
  // Name is optional, will be extracted from ICC data if not provided. Setting
  // a name for the profile that differs from the one in the ICC data will not
  // make Scribus resolve it correctly. Forcing a different name should only be
  // done if baboon cannot parse the ICC file correctly.
  string name        = 1;
  string description = 2;
  bytes file         = 3;
}

message StoreICCProfileResponse {
  string version = 1;
}

message ListICCProfilesRequest {
  int64 page = 1;
}

message ListICCProfilesResponse {
  repeated ICCProfileInfo items = 1;
  int64 next_page               = 2;  
}

message ICCProfileInfo {
  string name        = 1;
  string version     = 2;
  string description = 3;
}

message RenderArticleRequest {
  // ArticleUuid is the UUID of the print article to render. Required.
  string article_uuid = 1;
  // LayoutId is the ID of the article layout to render. Required.
  string layout_id    = 2;
  // RenderPDF will enable PDF rendering.
  bool render_pdf   = 3;
  // RenderPDF will enable PNG rendering.
  bool render_png   = 4;
  // PngScale is the DPI of the rendered PDF. Defaults to 200.
  int64 png_scale     = 5;
}

message RenderArticleResponse {
  int64 id           = 1;
  string pdf_url     = 2;
  string png_url     = 3;
  string scribus_url = 4;
  int32 png_width    = 5;
  int32 png_height   = 6;
  // Images that were mounted.
  repeated MountedImage images = 7;
  // Overflows is a list of text frames whose contents overflowed the frame.
  repeated Overflow overflows  = 8;
  // TaggedTextUrl is a zip archive with the indesign-tagged text for the article.
  string tagged_text_url       = 9;
}

message MountedImage {
  // Frame name that was used for the image.
  string frame      = 1;
  // BoundingBox for the image in 0.0-1.0 coordinates relative to the page width
  // and height.
  Rect bounding_box = 2;
  // PPI before any PDF downsampling was applied.
  double ppi        = 3;
}

message Overflow {
  // Frame name that overflowed.
  string frame      = 1;
  // BoundingBox for the frame in 0.0-1.0 coordinates relative to the page width
  // and height.
  Rect bounding_box = 2;
}

message Rect {
  double x = 1;
  double y = 2;
  double width = 3;
  double height = 4;
}

message GetEditableArchiveRequest {
  int64 render_id = 1;
}

message GetEditableArchiveResponse {}

message LayoutPreviewRequest {
  string sla_file            = 1;
  newsdoc.Document layout    = 2;
  string content_uuid        = 3;
  newsdoc.Document content   = 4;
  string article_layout      = 5;
  map<string, bool> features = 6;
}

message LayoutPreviewResponse {
  // PDFData produced by the render.
  bytes pdf_data               = 1;
  // Images that were mounted.
  repeated MountedImage images = 2;
  // Overflows is a list of text frames whose contents overflowed the frame.
  repeated Overflow overflows  = 3;
  // ScribusDoc is the Scribus document used to render the preview.
  bytes scribus_doc            = 4;
}
